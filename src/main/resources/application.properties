spring.application.name=Job
server.port=${SERVER_PORT}

spring.security.oauth2.client.registration.google.client-id = ${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret = ${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${BASE_URL}/login/oauth2/code/google


app.oauth2.authorizedRedirectUris=${FRONTEND_URL}/auth/callback


# PostgreSQL database configuration
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

#---- Create new user with password (database: topcv)
# CREATE USER topcvuser WITH PASSWORD '12345678';
# GRANT ALL PRIVILEGES ON DATABASE topcv TO topcvuser;
# GRANT USAGE, CREATE ON SCHEMA public TO topcvuser;
# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO topcvuser;

#spring.datasource.url=jdbc:postgresql://localhost:5432/topcv
#spring.datasource.username=topcvuser
#spring.datasource.password=12345678

#spring.datasource.driver-class-name=org.postgresql.Driver


logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace

#logging.level.org.springframework.web.socket=ERROR
#logging.level.org.springframework.messaging=ERROR
#logging.level.org.springframework.web.socket.messaging=ERROR
#logging.level.org.springframework.web.socket.server=ERROR
#logging.level.org.springframework.web.socket.client=ERROR
logging.level.org.springframework.messaging=trace


app.jwt-secret=${JWT_SECRET}
app.jwt.access-token-expiration-seconds=604800
app.jwt.refresh-token-expiration-seconds=2592000
app.decrypt-key=${DECRYPT_KEY}

# Hibernate configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


# spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true


# HikariCP connection pool configuration
# spring.datasource.hikari.minimum-idle=5: Số kết nối tối thiểu trong pool khi không hoạt động.
# spring.datasource.hikari.maximum-pool-size=20: Số kết nối tối đa trong pool (tùy chỉnh dựa trên nhu cầu ứng dụng).
# spring.datasource.hikari.idle-timeout=60000: Thời gian tối đa (ms) một kết nối có thể ở trạng thái idle trước khi bị đóng (30 giây).
# spring.datasource.hikari.max-lifetime=1800000: Thời gian sống tối đa của một kết nối (30 phút).
# spring.datasource.hikari.connection-timeout=30000: Thời gian tối đa chờ để lấy kết nối từ pool (30 giây).
# spring.datasource.hikari.auto-commit=true: Bật chế độ autocommit (đảm bảo Hibernate ghi nhận đúng).
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.idle-timeout=60000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000

#swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
springdoc.override-with-generic-response=false
springdoc.swagger-ui.url=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

#redis
#spring.data.redis.host=localhost
#spring.data.redis.port=6379
## Tuỳ chọn (nếu có password)
#spring.data.redis.password=
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.username=${REDIS_USERNAME}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.ssl.enabled=${REDIS_SSL_ENABLED}

#rate limit
# resilience4j.ratelimiter.instances.myRateLimiter.limit-for-period=5: Giới hạn tối đa 5 yêu cầu trong một chu kỳ.
# resilience4j.ratelimiter.instances.myRateLimiter.limit-refresh-period=10s: Chu kỳ làm mới giới hạn là 10 giây.
# resilience4j.ratelimiter.instances.myRateLimiter.timeout-duration=1s: Thời gian chờ tối đa cho mỗi yêu cầu là 1 giây.
resilience4j.ratelimiter.instances.globalRateLimiter.limit-for-period=500
resilience4j.ratelimiter.instances.globalRateLimiter.limit-refresh-period=10s
resilience4j.ratelimiter.instances.globalRateLimiter.timeout-duration=3s
resilience4j.ratelimiter.instances.perUserRateLimiter.limit-for-period=5
resilience4j.ratelimiter.instances.perUserRateLimiter.limit-refresh-period=10s
resilience4j.ratelimiter.instances.perUserRateLimiter.timeout-duration=2s

#mongoDB
spring.data.mongodb.uri=mongodb+srv://topcv:Topcv123456@clustertopcv.nhxhu.mongodb.net/topcv?appName=ClusterTopcv
# spring.data.mongodb.database=

# Cloudinary
# cloudinary_url=cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME>
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api-key=${CLOUDINARY_API_KEY}
cloudinary.api-secret=${CLOUDINARY_API_SECRET}

# Max file size for a single file
spring.servlet.multipart.max-file-size=5MB

# Max request size (total size of all uploaded files in a request)
spring.servlet.multipart.max-request-size=10MB

# Config email with Gmail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SMTP_USER}
spring.mail.password=${SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true